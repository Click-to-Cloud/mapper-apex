{"title":"Mapper.apex","githubRepo":"Click-to-Cloud/Mapper.apex","googleAnalytics":"","index":{"title":"Home","description":"Mapper.apex is a library to help converting one object to another.","content":" Common Mapping Mapper.apex can do simple conversions between custom DTO objects and SObjects. Complex Conversion Mapper.apex can also be used to convert objects with complex rules. Nested Mapping Mapper.apex offers Mapper.DTO to operate on nested mappings. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/mapper-apex/./","children":{"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/mapper-apex/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/mapper-apex/docs/search.html"},"DTO":{"title":"Mapper.DTO","description":"Mapper.DTO","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Mapper.DTO Reference Mapper.DTO is a wrapper object for nested maps. Mapper.DTO d = new Mapper.DTO(); d.setObject('a.b.c', 'test'); Boolean flag = d.getBoolean('task.terminated'); Constructors Here are the constructors. | Constructor | Description | | ----------- | ----------- | | DTO() | Constrcutor to create an empty DTO | | DTO(DTO) | Constructor to create an instance from another DTO | | DTO(String) | Constructor to create an instance from a JSON string | | DTO(Map&lt;String, Object&gt;) | Constructor to create an instance from a Map&lt;String, Object&gt; | | DTO(SObject) | Constructor to create an instance from an SObject | | DTO(Object) | Constrcutor to create an instance from an Object | Mapper.DTO d = new MapperDTO(); Query Here are the query APIs. | Method | Description | | ----------- | ----------- | | keySet() | Get the keys of the DTO | | containsPath(List&lt;String&gt;) | Check if the DTO has the path | | containsPath(String) | Check if the DTO has the path | Conversion Here are the methods to convert DTO to other objects. | Method | Description | | ----------- | ----------- | | toMap() | Convert to Map&lt;String, Object&gt; | | toJSON() | Convert to JSON string | | toObject(Type) | Convert to Object of the given type | | toSObject(Type) | Convert to SObject of the given type | Mapper.DTO d = new MapperDTO(); Map m = d.toMap(); Accessors Here are the getters/setters for DTOs. | Method | Description | | ----------- | ----------- | | setObject(List&lt;String&gt;, Object) | Set the value at the path | | setObject(String, Object) | Set the value at the path | | getObject(List&lt;String&gt;) | Get the value at the path | | getObject(String) | Get the value at the path | | setBoolean(List&lt;String&gt;, Object) | Set the value at the path | | setBoolean(String, Object) | Set the value at the path | | getBoolean(List&lt;String&gt;) | Get the value at the path | | getBoolean(String) | Get the value at the path | | setInteger(List&lt;String&gt;, Object) | Set the value at the path | | setInteger(String, Object) | Set the value at the path | | getInteger(List&lt;String&gt;) | Get the value at the path | | getInteger(String) | Get the value at the path | | setLong(List&lt;String&gt;, Object) | Set the value at the path | | setLong(String, Object) | Set the value at the path | | getLong(List&lt;String&gt;) | Get the value at the path | | getLong(String) | Get the value at the path | | setDouble(List&lt;String&gt;, Object) | Set the value at the path | | setDouble(String, Object) | Set the value at the path | | getDouble(List&lt;String&gt;) | Get the value at the path | | getDouble(String) | Get the value at the path | | setDecimal(List&lt;String&gt;, Object) | Set the value at the path | | setDecimal(String, Object) | Set the value at the path | | getDecimal(List&lt;String&gt;) | Get the value at the path | | getDecimal(String) | Get the value at the path | | setString(List&lt;String&gt;, Object) | Set the value at the path | | setString(String, Object) | Set the value at the path | | getString(List&lt;String&gt;) | Get the value at the path | | getString(String) | Get the value at the path | | setList(List&lt;String&gt;, Object) | Set the value at the path | | setList(String, Object) | Set the value at the path | | getList(List&lt;String&gt;) | Get the value at the path | | getList(String) | Get the value at the path | | setSet(List&lt;String&gt;, Object) | Set the value at the path | | setSet(String, Object) | Set the value at the path | | getSet(List&lt;String&gt;) | Get the value at the path | | getSet(String) | Get the value at the path | | setMap(List&lt;String&gt;, Object) | Set the value at the path | | setMap(String, Object) | Set the value at the path | | getMap(List&lt;String&gt;) | Get the value at the path | | getMap(String) | Get the value at the path | | setSObject(List&lt;String&gt;, Object) | Set the value at the path | | setSObject(String, Object) | Set the value at the path | | getSObject(List&lt;String&gt;) | Get the value at the path | | getSObject(String) | Get the value at the path | | setDate(List&lt;String&gt;, Object) | Set the value at the path | | setDate(String, Object) | Set the value at the path | | getDate(List&lt;String&gt;) | Get the value at the path | | getDate(String) | Get the value at the path | | setTime(List&lt;String&gt;, Object) | Set the value at the path | | setTime(String, Object) | Set the value at the path | | getTime(List&lt;String&gt;) | Get the value at the path | | getTime(String) | Get the value at the path | | setDatetime(List&lt;String&gt;, Object) | Set the value at the path | | setDatetime(String, Object) | Set the value at the path | | getDatetime(List&lt;String&gt;) | Get the value at the path | | getDatetime(String) | Get the value at the path | | setFunc(List&lt;String&gt;, Object) | Set the value at the path | | setFunc(String, Object) | Set the value at the path | | getFunc(List&lt;String&gt;) | Get the value at the path | | getFunc(String) | Get the value at the path | Mapper.DTO d = new MapperDTO(); d.setInteger('age', 30); ","srcFilePath":"src/pages/docs/DTO/index.md","id":"DTO","location":"/docs/DTO/","url":"/mapper-apex/docs/DTO/"},"Mapping":{"title":"Mapping","description":"Mapping","layout":"guide","icon":"flash","weight":1,"content":" {$page.description} Problem of Mapping We often meet situations like this: Convert between SObjects and custom DTO objects Convert between Maps and SObjects Convert between JSON strings and custom objects Convert between custom objects These are fairly common, and we all know how to handle them. Mapper.apex is here just to make things easier and more straightforward. What Mapper.apex can do? Mapper.apex is designed to build a functional API to handle conversions between any of these objects: JSON string Map&lt;String, Object&gt; SObject Object Mapper.DTO Fundamentally, a Mapper is a Func, so it naturally integrates well with R.apex. How Mapper.apex does this? We notice that conversions between objects all focus on conversions between object fields. So the root of this problem is to model object field conversions. Mapper.apex supports the following field conversions: Convert from one field of one object to another field of another object(Pattern A) Convert from multiple fields of one object to another field of another object(Pattern B) Convert from multiple fields of multiple objects to another field of another object(Pattern C) And by iterating field conversions, object conversions are done. Field Mapper A Field Mapper is an object that converts one field of one object to another field of another object. Below is the key factors of a Field Mapper. | Factor | Description | | ------ | ----------- | | Field Name | The name of the field that the FieldMapper will convert the value to | | Keys | A list of keys, each of which specify one field of the source objects to convert from | | Transformer | A Func that accepts the values from the keys of the source objects, and transform them into the value of the destination field | new Mapper() .mapField('name', new Mapper.FieldMapper(new List{ 'Name' }, R.identity)); In the code above, we add one field mapper to the mapper. This field mapper will get the field value of 'Name' from the source object, and use R.identity to process the value, and then set the final value to the fielf of name of the converted object. Inputs and Outputs A Mapper automatically accepts any of the 5 types below: JSON string Map&lt;String, Object&gt; SObject Object Mapper.DTO However, we need to specify which type we want to convert to. new Mapper() .mapField('name', 'Name') .toMap(); This code creates a Mapper that will finally convert the object into a map. Field Mapper Key A Field Mapper Key is a path that specifies the exact field name of the object that we want to get the value from. Field Mapper keys can be nested. new Mapper() mapField('name', 'Account.Name'); Here we have a . separated string that acts as the Field Mapper Key, which specifies the Name field of the object, under the field Account of the source object. Pattern A Most of the time, we convert the fields on a one-to-one basis like this. Map src = new Map{ 'a' = 1, 'b' = 2 }; Mapper m = new Mapper() .mapField('x', 'a') .mapField('y', 'b') .toMap(); Map dest = (Map)m.run(src); a: 1, b: 2 is converted to x: 1, y: 2. Each of the field is mapped to another unique field. Pattern B Sometimes, we need more than one field to calculate the new field we want. Map src = new Map{ 'a' = 1, 'b' = 2 }; Mapper m = new Mapper() .mapField('sum', 'a', 'b', R.add) .mapField('product', 'a', 'b', R.multiply) .toMap(); Map dest = (Map)m.run(src); a: 1, b: 2 is converted to sum: 3, product: 2. Both a and b fields are used to calculate the new sum and product fields. Pattern C Very rarely, we would even use more than one objects to convert into one object. Map src1 = new Map{ 'a' = 1, 'b' = 2 }; Map src2 = new Map{ 'a' = 3, 'b' = 4 }; Mapper m = new Mapper() .inputAs('src1', 'src2') .mapField('sum', 'src1.a', 'src2.a', R.add) .mapField('product', 'src2.b', 'src2.b', R.multiply) .toMap(); Map dest = (Map)m.run(src1, src2); The result is sum: 4, product: 8. We use inputAs to rename the source objects so that we can reference them in the Field Mapper Key expressions, like src1.a. Then we prefix the normal Field Mapper Key to get the value from the specific source objects. ","srcFilePath":"src/pages/docs/Mapping/index.md","id":"Mapping","location":"/docs/Mapping/","url":"/mapper-apex/docs/Mapping/"},"Methods":{"title":"Methods","description":"Methods of Mapper","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} Methods Reference Here is the full reference for Mapper. Rename Input Objects We use below methods to rename input objects, so that we can reference them in the Field Mapper Key expressions. | Method | Description | | ------ | ----------- | | inputAs(List&lt;String&gt;) | Rename to the name list | | inputAs(String, String) | Rename to the two names | | inputAs(String, String, String) | Rename to the three names | Example: new Mapper() .inputAs('src1', src2) .mapField('x', 'src1.x') .mapField('y', 'src2.y') .toMap(); If there is only one source object, we don't need to use inputAs. Map Fields We have various methods to add field mappings to the Mapper. | Method | Description | | ------ | ----------- | | mapField(String, Mapper.FieldMapper) | Map the field using the field mapper | | mapField(String, List&lt;String&gt;, Func) | Map the field using a list of keys and transformer | | mapField(String, String, String, Func) | Map the field using two keys and a transformer | | mapField(String, String, Func) | Map the field using one key and the transformer | | mapField(String, Func) | Map the field using only the transformer, the field name unchanged | | mapField(String, String) | Map the field using only the key, the field value unchanged | | mapField(String) | Map the field using the same field name, the field value unchanged | | mapFields(Map&lt;String, Object&gt;) | Map the fields using the field mappers | Example: new Mapper() .mapFields(new Map{ 'x' = new Mapper.FieldMapper('a', R.identity), 'y' = 'b', 'c' = R.identity }); When using mapFields, the values in the field mapper map can be: FieldMapper, which will be used to map the field String, the Field Mapper key Func, the transformer to process the value Reverse Mapper For mappers that contain only one-to-one field mappers and do not have any names set from inputAs, we can easily create their reverse mappers. Mapper reversed = m.reverseToMap(); Here we have a list of methods to specify the exact type of object the reversed mapper converts to. | Method | Description | | ------ | ----------- | | reverseTo(String, Type) | Specify the type and objectType that the reversed mapper converts to | | reverseTo(String) | Specify the type that the reversed mapper converts to | | reverseToJSON() | Reversed mapper will convert to JSON string | | reverseToMap() | Reversed mapper will convert to Map&lt;String, Object&gt; | | reverseToObject(Type) | Reversed mapper will convert to Object with the given type | | reverseToSObject(Type) | Reversed mapper will convert to SObject with the given type | | reverseToDTO() | Reversed mapper will convert to Mapper.DTO | Specify Convert To We need to specify which type the mapper will convert the object to. new Mapper() .mapField('name', 'Name') .toObject(AccountDTO.class); Here is a list of methods that we can use: | Method | Description | | ------ | ----------- | | to(String, Type) | Convert to the type and objectType | | to(String) | Convert to the type | | toJSON() | Convert to JSON string | | toMap() | Convert to Map&lt;String, Object&gt; | | toDTO() | Convert to Mapper.DTO | | toObject(Type) | Convert to Object with the given type | | toSObject(Type) | Convert to SObject with the given type | ","srcFilePath":"src/pages/docs/Methods/index.md","id":"Methods","location":"/docs/Methods/","url":"/mapper-apex/docs/Methods/"}},"childIds":["Mapping","Methods","DTO","search"]},"tutorials":{"title":"Tutorials","description":"The tutorials","url":"/mapper-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"getting_started":{"title":"Getting Started","description":"The Getting Started Tutorial","tutorialTitle":"Getting started with Mapper.apex","url":"/mapper-apex/tutorials/getting_started/step_1.html","layout":false,"content":" ","srcFilePath":"src/pages/tutorials/getting_started/index.soy","id":"getting_started","location":"/tutorials/getting_started/","customURL":true,"children":{"step_1":{"title":"Installation","description":"Include Apex files","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":1,"content":" {$page.title} Mapper.apex has a dependency on R.apex. First, we will include R.apex. Include Func.cls, R.cls, and RTest.cls(optional) into your Org, and R.apex is ready. Then, we will include Mapper.apex. Include Mapper.cls, and MapperTest.cls(optional) into your Org, and you are ready to go. ","srcFilePath":"src/pages/tutorials/getting_started/step_1.md","id":"step_1","location":"/tutorials/getting_started/step_1.html","url":"/mapper-apex/tutorials/getting_started/step_1.html"},"step_2":{"title":"Preliminary Knowledge","description":"Preliminary Knowledge","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":2,"content":" {$page.title} It's recommended that you have a fair amount of knowledge on R.apex, but it's not required. Mapper.apex uses Func objects from R.apex, and a Func is actually a custom Apex object that mimics the behavior of a function. Here is how your implement a custom Func. public class HelloWorldFunc extends Func { public HelloWorldFunc() { super(0); // specify the number of arguments the Func takes } // Provide custom implementation for a Func that takes 0 arguments. public override Object exec() { return 'Hello World'; } } And then you instantiate, and invoke it. Func helloworld = new HelloWorldFunc(); String msg = (String)helloworld.run(); To get deeper with Func objects, please check R.apex. ","srcFilePath":"src/pages/tutorials/getting_started/step_2.md","id":"step_2","location":"/tutorials/getting_started/step_2.html","url":"/mapper-apex/tutorials/getting_started/step_2.html"},"step_3":{"title":"Common Mapping","description":"Common Mapping","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":3,"content":" {$page.title} We can do simple mappings like this: Account acc = ...; Mapper m = new Mapper() .mapField('name', 'Name') .mapField('description', 'Description') .toObject(AccountDTO.class); AccountDTO dto = (AccountDTO)m.run(acc); // Create AccountDTO with fields 'name' and 'description' This piece of code converts an SObject(Account) with 'Name' to a custom class AccountDTO with 'name'. The value of 'Name' from Account is simply copied to 'name' in AccountDTO. And we can easily reverse the mapping. Mapper reversed = m.reverseToSObject(Account.class); Account acc = (Account)reversed.run(dto); // Map the AccountDTO back to Account The pair of mappers help us to convert between two objects. ","srcFilePath":"src/pages/tutorials/getting_started/step_3.md","id":"step_3","location":"/tutorials/getting_started/step_3.html","url":"/mapper-apex/tutorials/getting_started/step_3.html"},"step_4":{"title":"Conversions","description":"Conversions","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":4,"content":" {$page.title} During the mapping, we can also transform the values. Mapper m = new Mapper() .mapField('name', 'Name', R.prepend.apply('Mr. ')) .toMap(); Map data = (Map)m.run(acc); // Create a map containing 'name' with the value prepended with 'Mr. ' In this example, we transform the value of 'Name' by prepending 'Mr. ', and then set it to field 'name'. We can go further than simply one field. Converting value from multiple fields is also supported. Mapper m = new Mapper() .mapField('desc', 'Name', 'Description', R.concat) .toMap(); Map data = (Map)m.run(acc); // Create a map containing 'desc' with the value of 'Name' // and 'Description' values concatenated Here we concatenate the values of 'Name' and 'Description' and then set it to the field 'desc'. Besides, we can easily access values in nested fields. Mapper m = new Mapper() .mapField('person.name', 'Account.Name') .toMap(); Map data = (Map)m.run(src); // Create a map with nested maps, 'person = name' with the value // of 'Account = Name' from the source map We get the value from nested fields 'Account.Name' and then set it to a nested field 'person.name'. The hidden power is that we can even convert multiple objects into one. Mapper m = new Mapper() .inputAs('src1', 'src2') .mapField('name', 'src1.Name') .mapField('desc', 'src2.Description') .toMap(); Map data = (Map)m.run(src1, src2); // Create a map containing 'name' and 'desc' with values // from two source objects In this example, we convert from src1 and src2 into data, by picking Name of src1 and Description of src2. ","srcFilePath":"src/pages/tutorials/getting_started/step_4.md","id":"step_4","location":"/tutorials/getting_started/step_4.html","url":"/mapper-apex/tutorials/getting_started/step_4.html"},"step_5":{"title":"Mapper.DTO","description":"Mapper.DTO","buttonTitle":"Done","parentId":"getting_started","layout":"tutorial","time":90,"weight":5,"content":" {$page.title} Mapper.DTO comes along with Mapper.apex to handle the nested map issue. Often when we manipulate maps nested in maps, things get complicated, as we need to check null, create empty map and handle all these trivial logic. In Mapper.apex, it is fairly easy. Mapper.DTO d = new Mapper.DTO(); d.setList('person.children', new List{}); Integer salary = d.getInteger('person.job.salary'); Internally Mapper.DTO maintains the nested map for us, and exposes handly APIs to access the data. ","srcFilePath":"src/pages/tutorials/getting_started/step_5.md","id":"step_5","location":"/tutorials/getting_started/step_5.html","url":"/mapper-apex/tutorials/getting_started/step_5.html"}},"childIds":["step_1","step_2","step_3","step_4","step_5"]}},"childIds":["getting_started"]}},"childIds":["docs","tutorials"]},"basePath":"/mapper-apex"}